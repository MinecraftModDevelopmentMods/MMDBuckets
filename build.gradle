def corePlugin = ""

buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'gradle'
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.9"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "maven-publish"

javadoc {
    failOnError = false
}

def mod_file = getModFile()
def mc_version = "1.12"
def short_version = getVersion("VERSION", mod_file)
version = mc_version + "-" + short_version
if (System.getenv().BUILD_NUMBER) {
    version += "." + System.getenv().BUILD_NUMBER
}
group = "com.mcmoddev"
archivesBaseName = "Buckets"
sourceCompatibility = targetCompatibility = "1.8"

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ""
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file "secret.json"
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    version = "1.12.2-14.23.0.2529"
    runDir = "run"
    mappings = "snapshot_20171121"
}

repositories {
    maven {
        name "MMD"
        url "https://maven.mcmoddev.com/"
    }
    maven { // CoFH stuff is here
    	name "Covers Maven"
    	url "http://maven.covers1624.net"
    }
    maven { // CoFH stuff is here
    	name "Covers Maven"
    	url "http://maven.covers1624.net"
    }
    maven {
        name "Chickenbones Repo"
        url "http://chickenbones.net/maven/"
    }
}

dependencies {
    deobfCompile "com.mcmoddev:BaseMetals:${mc_version}-${bme_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": short_version, "mcversion": project.minecraft.version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    manifest {
    }
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
            artifact deobfJar {
                classifier "deobf"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

curseforge {
    apiKey = secret.curseforgeAPIKey
    project {
        id = "282366"
        changelog = file("CHANGELOG.txt")
        releaseType = "release"
        addGameVersion(project.mc_version)
        def projName = "End Metals"
        def displayVersion = getVersion("VERSION", mod_file)
        if (System.getenv().BUILD_NUMBER) {
            displayVersion += "." + System.getenv().BUILD_NUMBER
        }
        mainArtifact(jar) {
            displayName = "$projName $displayVersion"
            relations {
                requiredLibrary "base-metals"
                optionalLibrary "base-minerals"
                optionalLibrary "modern-metals"
		optionalLibrary "nether-metals"
		optionalLibrary "end-metals"
            }
        }
        addArtifact(sourceJar) {
            displayName = "$projName $displayVersion Sources"
        }
        addArtifact(deobfJar) {
            displayName = "$projName $displayVersion Development"
        }
        addArtifact(javadocJar) {
            displayName = "$projName $displayVersion Javadoc"
        }
    }
}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: "src/main/java")
    tree.include "**/*.java"
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod(")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }
    return "$major.$revision.$patch";
}
